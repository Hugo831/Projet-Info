package projet;
import javax.swing.*;
import java.awt.*;


public class PNJ extends Carre implements Drawable {

    private int Pts_Vie;
    private int initVie;
    private Vague vague;
    private int Points;                      // points perdus si le PNJ arrive a la sortie
    private Plateau_Jeu plateau;
    private boolean inGame = true;
    private int upward = 0, downward = 1, right = 2, left = 3;
    private int direction = right;                   //direction par defaut vers la droite
    private int deplacement = 0;
    private Carre chemin;
    private boolean hasUpward = false;
    private boolean hasDownward = false;
    private boolean hasRight = false;
    private boolean hasLeft = false;
    private int recompense;
    private int vitesse_controle = 1;

    public PNJ(int x, int y, int cote, int pts_Vie, Plateau_Jeu plateau, int airID, int groundID, int recompense, Vague vague){
        super(x, y, cote, airID, groundID);
        this.Pts_Vie = pts_Vie;
        this.initVie = pts_Vie;
        this.plateau = plateau;
        this.recompense = recompense;
        this.vague = vague;
        depart_pnj();
    }

    public void draw(Graphics graphics) {
        if (inGame) {
            graphics.setColor(Color.BLUE);
            graphics.fillRect(getX(), getY(), getCote(), getCote());
            graphics.setColor(Color.BLACK);
            graphics.drawRect(getX(),getY(),getCote(),getCote());
            graphics.drawRect(getX(), getY() - 10, getCote(), 6);
            graphics.setColor(Color.GREEN);
            graphics.fillRect(getX(), getY() - 10, getCote(), 6);
            graphics.setColor(Color.RED);
            int tailleRectVie = (int)(((double) Pts_Vie/initVie) * 50);
            graphics.fillRect(getX() + tailleRectVie, getY()-10, getCote() - tailleRectVie, 6);           // ne marche que pour 500 ptsvie
        }

    }
    public void depart_pnj(){
        if (!inGame){
            int [] pos= plateau.getFirstPos();
            int xC = pos[0];                        // position du premier carre du chemin
            int yC = pos[1];
            setX(xC);
            setY(yC);
            this.inGame = true;

        }


    }
    public boolean getInGame(){
        return inGame;
    }
    public void setInGame(boolean b){
        this.inGame = b;
    }

    private int compteur = 0;
    public void se_deplacer() {
        if (compteur >= vitesse_controle){
            if (direction == right){
                int x = this.getX() + 1;
                setX(x);
            }
            else if (direction == upward){
                int y = this.getY() - 1;
                setY(y);
            }
            else if (direction == downward){
                int y = this.getY() + 1;
                setY(y);
            }
            else if (direction == left){
                int x = this.getX() - 1;
                setX(x);
            }
            deplacement += 1;
            if (deplacement == plateau.getCote_carre()){            // modifier les coordonnees des carres occupe par le pnj
                if (direction == right){
                    hasRight = true;
                }
                else if (direction == upward){
                    hasUpward = true;
                }
                else if (direction == downward){
                    hasDownward = true;
                }
                else if (direction == left){
                    hasLeft = true;
                }
                if (!hasUpward) {
                    try {
                        if (plateau.getCarre(getX(), getY() + plateau.getCote_carre()) instanceof Chemin) {
                            direction = downward;
                        }
                    } catch (Exception e) {
                    }
                }
                if (!hasDownward) {
                    try {
                        if (plateau.getCarre(getX(), getY() - plateau.getCote_carre()) instanceof Chemin) {
                            direction = upward;
                        }
                    } catch (Exception e) {
                    }
                }
                if (!hasLeft) {
                    try {
                        if (plateau.getCarre(getX() + plateau.getCote_carre(), getY()) instanceof Chemin) {
                            direction = right;
                        }
                    } catch (Exception e) {
                    }
                }
                if (!hasRight) {
                    try {
                        if (plateau.getCarre(getX() - plateau.getCote_carre(), getY()) instanceof Chemin) {
                            direction = left;
                        }
                    } catch (Exception e) {
                    }
                }
                hasLeft = false;
                hasDownward = false;
                hasUpward = false;
                hasRight = false;
                deplacement = 0;
            }

            compteur = 0;
        }
        else{
            compteur += 1;
        }

    }
    public void delete(){
        if (getX() >= plateau.getWidth()) {
            inGame = false;


        }

    }
    public void loose_Score(Joueur joueur){
        if (getX() == plateau.getWidth() && inGame) {
            joueur.setScore(joueur.getScore() - 1);
            vague.setKills(vague.getKills() + 1);
        }
    }
    public int getPts_Vie(){
        return Pts_Vie;
    }
    public void setPts_Vie(int pts_Vie){
        this.Pts_Vie = pts_Vie;
    }
    public void DeadMoney(Joueur joueur){
        joueur.setMoney(joueur.getMoney() + recompense);
    }

    public int getCentralX(){
        return getX() + getCote()/2;
    }

    public int getCentralY(){
        return getY() + getCote()/2;
    }

}
